"""
Django settings for audiohosting_site project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import django_heroku

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
from dotenv import load_dotenv
load_dotenv()
SECRET_KEY = os.getenv("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['ad-auris-sermonis.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'audioApp',
    'storages'
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'audiofield.middleware.threadlocals.ThreadLocals',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'audiohosting_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
        os.path.join(BASE_DIR, 'audioApp', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'audiohosting_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
import os
from dotenv import load_dotenv
load_dotenv()

POSTGRES_DB = os.getenv("POSTGRES_DB", default="")
POSTGRES_USER = os.getenv("POSTGRES_USER", default="")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", default="")
POSTGRES_HOST = os.getenv("POSTGRES_HOST", default="")


# if DEBUG:
DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }    
# else:
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.postgresql",
#             "NAME": POSTGRES_DB,
#             "USER": 'postgres',
#             "PASSWORD": POSTGRES_PASSWORD,
#             "HOST": 'localhost',
#             "PORT": 5433,
#         }
#     }
# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Data + Storage  - Local and Production
TEMPLATE_DIRS = (
        os.path.join(BASE_DIR, 'templates'),
    )
STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
    )

# for local environment


# if DEBUG == True:
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/3.1/howto/static-files/

# # DEBUG STATIC
    
#     STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')
#     STATIC_URL = '/static/'
#     MEDIA_URL = '/media/'
#     # Static to prod
#     MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#     MEDIA_DIR = os.path.join(BASE_DIR, 'audioApp/media')

#     # Static to production
#     # STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]
#     # STATIC_ROOT = os.path.join(BASE_DIR, 'audioApp/staticfiles')

#     STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
#      


#     DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    
#     # STATIC_ROOT = 'static/'
#     # STATIC_URL = '/static/'
    
#     # MEDIA_ROOT = STATIC_ROOT + 'media'
#     # MEDIA_URL = STATIC_URL + 'media/'
    
#     UPLOAD_ROOT = 'uploads/'
    
#     DOWNLOAD_URL = STATIC_URL + "media/downloads"
#     DOWNLOAD_ROOT = os.path.join(PROJECT_ROOT, "static/media/downloads")
# for prod environment

# Google Storage Settings 
from google.oauth2 import service_account
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME")
# GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
#     os.path.join(BASE_DIR, "ad-auris-tts-app-6b66a8f8cdfe.json")
# )


# if DEBUG == True or False: 
from django.core.files.storage import default_storage
PROJECT_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir)
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

GS_PROJECT_ID = os.getenv("GS_PROJECT_ID")
GS_STATIC_BUCKET_NAME = os.getenv("GS_STATIC_BUCKET_NAME")
GS_MEDIA_BUCKET_NAME = os.getenv("GS_MEDIA_BUCKET_NAME")

STATIC_URL = 'https://storage.googleapis.com/{}/'.format(GS_STATIC_BUCKET_NAME)
STATIC_ROOT = "static/"

MEDIA_URL = 'https://storage.googleapis.com/{}/'.format(GS_MEDIA_BUCKET_NAME)
MEDIA_ROOT = "media/"

UPLOAD_ROOT = 'media/uploads/'

DOWNLOAD_ROOT = os.path.join(PROJECT_ROOT, "static/media/downloads")
DOWNLOAD_URL = STATIC_URL + "media/downloads"

django_heroku.settings(locals())
